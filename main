#include <Arduino.h>
#include <WiFi.h>
#include <FirebaseESP32.h>
#include <Wire.h>
#include <Adafruit_Sensor.h>
#include <Adafruit_BMP280.h>
#include <time.h>

// =============================================
//               FUNCTION PROTOTYPES
// =============================================

class DisplayController {
public:
    DisplayController();
    void refresh();
    void updateBuffer(const int newDigits[8]);
    void showNumber(int number);
    void showTemperature(float tempF, float tempC);
    void showTime(const tm& timeinfo);
    void showDate(const tm& timeinfo);
    void showError();
private:
    int displayBuffer[8];
    int activeDigits[8];
    unsigned long lastRefresh;
    unsigned long lastDisplayUpdate;
    int currentDigit;
};

class SensorManager {
public:
    bool begin();
    float readTemperatureC();
    float readTemperatureF();
private:
    Adafruit_BMP280 bmp;
};

class NetworkManager {
public:
    void connectWiFi();
    void initFirebase();
    int getDisplayNumber();
    String getOperationMode();
    void updateValuesFromFirebase();
    float getCurrentTempF();
    float getCurrentTempC();
    int getCurrentNumber();
    void updateTemperature(float tempC);  // Added public setter
private:
    FirebaseData fbdo;
    float currentTempF = 0;
    float currentTempC = 0;
    int currentNumber = 0;
    String currentMode = "AUTO";
    unsigned long lastFirebaseUpdate = 0;
};

class ModeController {
public:
    enum class DisplayMode { TEMPERATURE, TIME, DATE };
    void update(DisplayController& display, SensorManager& sensor, NetworkManager& network, const tm* timeinfo);
private:
    DisplayMode currentDisplay = DisplayMode::TEMPERATURE;
    unsigned long lastModeSwitch = 0;
    unsigned long lastValueUpdate = 0;
    int lastMinute = -1;
};

// =============================================
//               CONSTANTS
// =============================================

namespace Constants {
    const char* WIFI_SSID = "FIME";
    const char* WIFI_PASSWORD = "27f1m32030";
    const char* FIREBASE_HOST = "https://iotapp-5608d-default-rtdb.firebaseio.com/";
    const char* FIREBASE_AUTH = "AIzaSyAcQny59ysfpBkhQ3xGjyztIeDJcFo0G4o";
    
    const int SEGMENT_PINS[8] = {23, 16, 25, 27, 14, 17, 33, 26};
    const int DIGIT_PINS[8] = {32, 15, 2, 4, 13, 5, 18, 19};
    
    const byte DIGIT_SEGMENTS[14] = {
        B00111111, B00000110, B01011011, B01001111,
        B01100110, B01101101, B01111101, B00000111,
        B01111111, B01101111, B01110001, B00111001,
        B01000000, B01100011
    };
    
    const int TIMEZONE_OFFSET = -6 * 3600;
    const unsigned long MODE_SWITCH_INTERVAL = 3000;
    const unsigned long FIREBASE_UPDATE_INTERVAL = 60000;
    const unsigned long VALUE_UPDATE_RATE = 1000;
}

// =============================================
//               GLOBAL VARIABLES
// =============================================

DisplayController display;
SensorManager sensor;
NetworkManager network;
ModeController modeController;

// =============================================
//               FUNCTION IMPLEMENTATIONS
// =============================================

// DisplayController implementation
DisplayController::DisplayController() : lastRefresh(0), lastDisplayUpdate(0), currentDigit(0) {
    for(int i = 0; i < 8; i++) {
        pinMode(Constants::SEGMENT_PINS[i], OUTPUT);
        pinMode(Constants::DIGIT_PINS[i], OUTPUT);
        digitalWrite(Constants::DIGIT_PINS[i], HIGH);
    }
}

void DisplayController::refresh() {
    if(micros() - lastRefresh >= 1000) {
        for(int i = 0; i < 8; i++) digitalWrite(Constants::DIGIT_PINS[i], HIGH);
        
        if(millis() - lastDisplayUpdate >= 20) {
            for(int i = 0; i < 8; i++) activeDigits[i] = displayBuffer[i];
            lastDisplayUpdate = millis();
        }
        
        if(activeDigits[currentDigit] >= 0) {
            byte segments = Constants::DIGIT_SEGMENTS[activeDigits[currentDigit]];
            for(int s = 0; s < 8; s++) digitalWrite(Constants::SEGMENT_PINS[s], (segments >> s) & 0x01);
        }
        
        digitalWrite(Constants::DIGIT_PINS[7 - currentDigit], LOW);
        currentDigit = (currentDigit + 1) % 8;
        lastRefresh = micros();
    }
}

void DisplayController::updateBuffer(const int newDigits[8]) {
    for(int i = 0; i < 8; i++) displayBuffer[i] = newDigits[i];
}

void DisplayController::showNumber(int number) {
    int tempDigits[8];
    String str = String(number);
    while(str.length() < 8) str = "0" + str;
    for(int i = 0; i < 8; i++) tempDigits[i] = str.charAt(i) - '0';
    updateBuffer(tempDigits);
}

void DisplayController::showTemperature(float tempF, float tempC) {
    int fInt = round(tempF);
    int cInt = round(tempC);
    bool fNeg = fInt < 0;
    bool cNeg = cInt < 0;
    fInt = abs(fInt);
    cInt = abs(cInt);
    
    int tempDigits[8] = {
        fNeg ? 12 : fInt/10, fInt%10, 13, 10,
        cNeg ? 12 : cInt/10, cInt%10, 13, 11
    };
    updateBuffer(tempDigits);
}

void DisplayController::showTime(const tm& timeinfo) {
    int timeDigits[8] = {
        timeinfo.tm_hour/10, timeinfo.tm_hour%10, 12,
        timeinfo.tm_min/10, timeinfo.tm_min%10, 12,
        timeinfo.tm_sec/10, timeinfo.tm_sec%10
    };
    updateBuffer(timeDigits);
}

void DisplayController::showDate(const tm& timeinfo) {
    int dateDigits[8] = {
        timeinfo.tm_mday/10, timeinfo.tm_mday%10, 12,
        (timeinfo.tm_mon+1)/10, (timeinfo.tm_mon+1)%10, 12,
        (timeinfo.tm_year%100)/10, (timeinfo.tm_year%100)%10
    };
    updateBuffer(dateDigits);
}

void DisplayController::showError() {
    int errorPattern[8];
    for(int i = 0; i < 8; i++) errorPattern[i] = (i % 2 == 0) ? 12 : -1;
    updateBuffer(errorPattern);
}

// SensorManager implementation
bool SensorManager::begin() {
    Wire.begin(21, 22);
    return bmp.begin(0x77);
}

float SensorManager::readTemperatureC() {
    return bmp.readTemperature();
}

float SensorManager::readTemperatureF() {
    return bmp.readTemperature() * 9/5 + 32;
}

// NetworkManager implementation
void NetworkManager::connectWiFi() {
    WiFi.begin(Constants::WIFI_SSID, Constants::WIFI_PASSWORD);
    Serial.print("Connecting");
    while(WiFi.status() != WL_CONNECTED) {
        delay(300);
        Serial.print(".");
    }
    Serial.println("\nConnected!");
}

void NetworkManager::initFirebase() {
    Firebase.begin(Constants::FIREBASE_HOST, Constants::FIREBASE_AUTH);
    Firebase.reconnectWiFi(true);
}

void NetworkManager::updateValuesFromFirebase() {
    unsigned long currentMillis = millis();
    if(currentMillis - lastFirebaseUpdate >= Constants::FIREBASE_UPDATE_INTERVAL) {
        if(Firebase.getInt(fbdo, "/ESP32IoTAPP_PIA/DISPLAY")) {
            currentNumber = fbdo.intData();
        }
        if(Firebase.getString(fbdo, "/ESP32IoTAPP_PIA/MODE")) {
            currentMode = fbdo.stringData();
        }
        lastFirebaseUpdate = currentMillis;
    }
}

int NetworkManager::getDisplayNumber() { return currentNumber; }
String NetworkManager::getOperationMode() { return currentMode; }
float NetworkManager::getCurrentTempF() { return currentTempF; }
float NetworkManager::getCurrentTempC() { return currentTempC; }
int NetworkManager::getCurrentNumber() { return currentNumber; }

// Added public setter for temperature
void NetworkManager::updateTemperature(float tempC) {
    currentTempC = tempC;
    currentTempF = tempC * 9/5 + 32;
}

// ModeController implementation
void ModeController::update(DisplayController& display, SensorManager& sensor, NetworkManager& network, const tm* timeinfo) {
    unsigned long currentMillis = millis();
    
    // Update sensor values periodically
    if(currentMillis - lastValueUpdate >= Constants::VALUE_UPDATE_RATE) {
        float tempC = sensor.readTemperatureC();
        network.updateTemperature(tempC);  // Use public setter instead of direct access
        lastValueUpdate = currentMillis;
    }

    if(network.getOperationMode() == "MANUAL") {
        display.showNumber(network.getDisplayNumber());
    } 
    else { // AUTO mode
        // Rotate display every 3 seconds
        if(currentMillis - lastModeSwitch >= Constants::MODE_SWITCH_INTERVAL) {
            switch(currentDisplay) {
                case DisplayMode::TEMPERATURE: currentDisplay = DisplayMode::TIME; break;
                case DisplayMode::TIME: currentDisplay = DisplayMode::DATE; break;
                case DisplayMode::DATE: currentDisplay = DisplayMode::TEMPERATURE; break;
            }
            lastModeSwitch = currentMillis;
        }

        // Update display based on current mode
        if(timeinfo) {
            switch(currentDisplay) {
                case DisplayMode::TEMPERATURE:
                    display.showTemperature(network.getCurrentTempF(), network.getCurrentTempC());
                    break;
                case DisplayMode::TIME:
                    display.showTime(*timeinfo);
                    break;
                case DisplayMode::DATE:
                    display.showDate(*timeinfo);
                    break;
            }
        } else {
            display.showError();
        }
    }
}

void setup() {
    Serial.begin(115200);

    if(!sensor.begin()) {
        Serial.println("Sensor initialization failed!");
        while(true);
    }

    network.connectWiFi();
    network.initFirebase();
    configTime(Constants::TIMEZONE_OFFSET, 0, "pool.ntp.org", "time.nist.gov");
}

void loop() {
    unsigned long loopStart = micros();

    // Get current time
    tm timeinfo;
    bool timeValid = getLocalTime(&timeinfo);

    // Update from Firebase (handles its own timing)
    network.updateValuesFromFirebase();

    // Update display
    modeController.update(display, sensor, network, timeValid ? &timeinfo : nullptr);

    // Refresh display (must be called constantly)
    display.refresh();

    // Maintain consistent loop timing
    while(micros() - loopStart < 1000);
}
